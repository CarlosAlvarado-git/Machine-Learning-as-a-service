library(NHSRdatasets)
library(dplyr)
library(tidyr)
library(varhandle)
library(magrittr)
library(rsample)
library(caret)
#remotes::install_github("https://github.com/StatsGary/ConfusionTableR")
library(ConfusionTableR)
#remotes::install_github("https://github.com/StatsGary/ConfusionTableR")
library(ConfusionTableR)
remotes::install_github("https://github.com/StatsGary/ConfusionTableR")
library(data.table)
library(taskscheduleR)
library(NHSRdatasets)
library(dplyr)
library(tidyr)
library(varhandle)
library(magrittr)
library(rsample)
library(caret)
library(caret)
install.packages("caret")
library(caret)
library.install('pak')
install.packages('pak')
library(pak)
pak::pak('topepo/caret/pkg/caret')
library(caret)
stranded <- NHSRdatasets::stranded_data %>%
setNames(c("stranded_class", "age", "care_home_ref_flag", "medically_safe_flag",
"hcop_flag", "needs_mental_health_support_flag", "previous_care_in_last_12_month", "admit_date", "frail_descrip")) %>%
mutate(stranded_class = factor(stranded_class)) %>%
drop_na()
cats <- varhandle::to.dummy(stranded$frail_descrip, "frail") %>%
as.data.frame() %>%
dplyr::select(-c(frail.No_index_item))
stranded <- stranded %>%
cbind(cats) %>%
dplyr::select(-c(admit_date, frail_descrip))
set.seed(123)
split <- rsample::initial_split(stranded, prop=3/4)
train_data <- rsample::training(split)
test_data <- rsample::testing(split)
class_bal_table <- table(stranded$stranded_class)
prop_tab <- prop.table(class_bal_table)
upsample_ratio <- class_bal_table[2] / sum(class_bal_table)
tb_model <- caret::train(stranded_class ~ .,
data = train_data,
method = 'treebag',
verbose = TRUE)
library(caret)
remove.packages("caret")
install.packages('caret')
library(caret)
library(lifecycle)
remove.packages("lifecycle")
install.packages('lifecycle')
install.packages("lifecycle")
library(lifecycle)
library(caret)
tb_model <- caret::train(stranded_class ~ .,
data = train_data,
method = 'treebag',
verbose = TRUE)
View(tb_model)
predict <- predict(tb_model, test_data, type="raw")
predict_probs <- predict(tb_model, test_data, type="prob")
predictions <- cbind(predict, predict_probs)
cm <- caret::confusionMatrix(predictions$predict,
test_data[, names(test_data) %in% c("stranded_class")])
View(cm)
db_append_table <- ConfusionTableR::binary_class_cm(cm)
db_append_table <- ConfusionTableR::binary_class_cm(cm)
saveRDS(tb_model, file = "tb_model.rds")
trained_model <- as.raw(serialize(tb_model, connection = NULL))
str(train_data)
library(plumber)
library(caret)
library(jsonlite)
library(ipred)
library(e1071)
library(yaml)
#--------------------------------------------------
# Read in model
#--------------------------------------------------
model <- readr::read_rds("tb_model.rds")
model$modelInfo
plumb(file='StrandedPlumberAPI.r')$run()
View(model)
View(stranded)
plumber::plumb(file='StrandedPlumberAPI.r')$run()
stranded1 <- NHSRdatasets::stranded_data %>%
setNames(c("stranded_class", "age", "care_home_ref_flag", "medically_safe_flag",
"hcop_flag", "needs_mental_health_support_flag", "previous_care_in_last_12_month", "admit_date", "frail_descrip")) %>%
mutate(stranded_class = factor(stranded_class)) %>%
drop_na()
library(NHSRdatasets)
library(dplyr)
library(tidyr)
library(varhandle)
library(magrittr)
library(rsample)
library(caret)
library(remotes)
#remotes::install_github("https://github.com/StatsGary/ConfusionTableR")
#library(ConfusionTableR)
#library(taskscheduleR)
library(data.table)
library(pak)
stranded1 <- NHSRdatasets::stranded_data %>%
setNames(c("stranded_class", "age", "care_home_ref_flag", "medically_safe_flag",
"hcop_flag", "needs_mental_health_support_flag", "previous_care_in_last_12_month", "admit_date", "frail_descrip")) %>%
mutate(stranded_class = factor(stranded_class)) %>%
drop_na()
View(stranded)
View(stranded1)
plumb(file='StrandedPlumberAPI.r')$run()
#remotes::install_github("https://github.com/StatsGary/ConfusionTableR")
library(ConfusionTableR)
data.table::fwrite(db_append_table, "confusion_matrix.csv")
plumb(file='StrandedPlumberAPI.r')$run()
plumb(file='StrandedPlumberAPI.r')$run()
req$body
plumb(file='StrandedPlumberAPI.r')$run()
req&body
req$body
req$body
